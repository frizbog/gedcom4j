<project name="gedcom4j" default="release" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<property file="gedcom4j.properties" />

	<!-- Stuff for Cobertura -->
	<property name="cobertura.dir" value="lib/cobertura" />
	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}" includes="*.jar" />
	</path>
	<taskdef resource="tasks.properties" classpathref="cobertura.classpath" />

	<!-- Stuff for Checkstyle -->
	<taskdef resource="checkstyletask.properties" classpath="lib/checkstyle-5.5-all.jar" />

	<!-- Stuff for Findbugs -->
	<property name="findbugs.home" value="lib/findbugs" />
	<path id="findbugs.classpath">
		<fileset dir="${findbugs.home}" includes="*.jar" />
	</path>
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.classpath" />

	<!-- Stuff for Maven Ant Tasks -->
	<path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />
	<property name="maven-staging-repository-id" value="sonatype-nexus-staging" />
	<property name="maven-staging-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
	<!-- Not planning to sync snapshots, but if I ever do... -->
	<property name="maven-snapshots-repository-id" value="sonatype-nexus-snapshots" />
	<property name="maven-snapshots-repository-url" value="https://oss.sonatype.org/content/repositories/snapshots/" />

	<target name="clean" description="Remove all build artifacts">
		<delete dir="tmp" />
		<delete dir="bin" />
		<delete dir="dist" />
		<delete dir="testbin" />
		<delete dir="target" />
		<delete dir="reports" />
		<delete>
			<fileset dir="${basedir}">
				<include name="cobertura.ser" />
				<include name=".swp" />
				<include name="junit*.properties"/>
			</fileset>
		</delete>
	</target>

	<target name="init" description="Create necessary directories for build">
		<mkdir dir="tmp" />
		<mkdir dir="bin" />
		<mkdir dir="dist" />
		<mkdir dir="testbin" />
		<mkdir dir="reports" />
	</target>

	<target name="compile" depends="init" description="Compile all source code">
		<javac srcdir="src" destdir="bin" deprecation="true" debug="true" debuglevel="lines,vars,source" source="1.5" target="1.5" includeantruntime="false" />
	</target>

	<target name="javadoc" depends="compile" description="Generate javadoc">
		<delete dir="reports/javadoc" />
		<javadoc sourcepath="src" destdir="reports/javadoc" access="private" />
	</target>

	<target name="dist" depends="javadoc" description="Build distribution jars">
		<delete dir="dist" />
		<mkdir dir="dist" />
		<copy todir="bin">
			<fileset dir="." includes="*.txt" />
		</copy>
		<jar basedir="bin" destfile="dist/gedcom4j-${release.version}.jar">
			<manifest>
				<attribute name="Source" value="http://gedcom4j.org" />
				<attribute name="Release-Version" value="${release.version}" />
			</manifest>
		</jar>
		<jar basedir="reports/javadoc" destfile="dist/gedcom4j-${release.version}-javadoc.jar">
			<manifest>
				<attribute name="Source" value="http://gedcom4j.org" />
				<attribute name="Release-Version" value="${release.version}" />
			</manifest>
		</jar>
		<jar basedir="." destfile="dist/gedcom4j-${release.version}-sources.jar">
			<include name="src/**" />
			<include name="test/**" />
			<manifest>
				<attribute name="Source" value="http://gedcom4j.org" />
				<attribute name="Release-Version" value="${release.version}" />
			</manifest>
		</jar>
	</target>

	<target name="release" depends="clean, dist" description="Create all the artifacts in the distribution directory" />

	<target name="explode-jar" depends="release" description="Convenience target for unjarring the distribution to the temp directory for inspection">
		<unjar dest="tmp" src="dist/gedcom4j-${release.version}.jar" />
	</target>

	<target name="maven-local" depends="release" description="Prepare release for push to LOCAL maven repository">
		<!--
		This target is inteded to be used by any developer to install the artifact to the local
		maven repository.
		-->
		<!-- Make the pom.xml from the template -->
		<copy filtering="true" overwrite="true" tofile="tmp/pom.xml">
			<fileset dir="etc">
				<include name="pom.template.xml" />
			</fileset>
			<filterset>
				<filter token="VERSION" value="${release.version}" />
			</filterset>
		</copy>

		<artifact:pom id="mypom" file="tmp/pom.xml" />
		<artifact:install file="dist/gedcom4j-${release.version}.jar">
			<pom refid="mypom"/>
		    <attach file="${basedir}/dist/gedcom4j-${release.version}-javadoc.jar" type="jar" classifier="javadoc"/>
		    <attach file="${basedir}/dist/gedcom4j-${release.version}-sources.jar" type="jar" classifier="sources"/>
		</artifact:install>
	</target>

	<target name="maven" description="Prepare release for push to maven repository">
		<!--
		This target is intended for use by the project owner(s) to push releases to maven central repository
		at SonaType.  It requires some specific information in your local maven repository which is not
		kept in source control for security reasons.  As such, this target generally won't work for anyone
		but the owner(s).
		-->
		<!-- Make the pom.xml from the template -->
		<copy filtering="true" overwrite="true" tofile="tmp/pom.xml">
			<fileset dir="etc">
				<include name="pom.template.xml" />
			</fileset>
			<filterset>
				<filter token="VERSION" value="${release.version}" />
			</filterset>
		</copy>

		<!-- Get the latest build artifacts for the desired version from the CI server -->
		<get dest="dist" src="https://gedcom4j.ci.cloudbees.com/job/gedcom4j.org/lastSuccessfulBuild/artifact/dist/gedcom4j-${release.version}.jar" />
		<get dest="dist" src="https://gedcom4j.ci.cloudbees.com/job/gedcom4j.org/lastSuccessfulBuild/artifact/dist/gedcom4j-${release.version}-javadoc.jar" />
		<get dest="dist" src="https://gedcom4j.ci.cloudbees.com/job/gedcom4j.org/lastSuccessfulBuild/artifact/dist/gedcom4j-${release.version}-sources.jar" />

		<!-- sign and stage the main jar file -->
		<artifact:mvn failonerror="true">
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
			<arg value="-Durl=${maven-staging-repository-url}" />
			<arg value="-DrepositoryId=${maven-staging-repository-id}" />
			<arg value="-DpomFile=tmp/pom.xml" />
			<arg value="-Dfile=dist/gedcom4j-${release.version}.jar" />
			<arg value="-Dgpg.executable=/usr/local/bin/gpg" />
			<arg value="-Pgpg" />
		</artifact:mvn>

		<!-- sign and stage the sources jar file -->
		<artifact:mvn failonerror="true">
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
			<arg value="-Durl=${maven-staging-repository-url}" />
			<arg value="-DrepositoryId=${maven-staging-repository-id}" />
			<arg value="-DpomFile=tmp/pom.xml" />
			<arg value="-Dfile=dist/gedcom4j-${release.version}-sources.jar" />
			<arg value="-Dclassifier=sources" />
			<arg value="-Dgpg.executable=/usr/local/bin/gpg" />
			<arg value="-Pgpg" />
		</artifact:mvn>

		<!-- sign and stage the javadoc jar file -->
		<artifact:mvn failonerror="true">
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
			<arg value="-Durl=${maven-staging-repository-url}" />
			<arg value="-DrepositoryId=${maven-staging-repository-id}" />
			<arg value="-DpomFile=tmp/pom.xml" />
			<arg value="-Dfile=dist/gedcom4j-${release.version}-javadoc.jar" />
			<arg value="-Dclassifier=javadoc" />
			<arg value="-Dgpg.executable=/usr/local/bin/gpg" />
			<arg value="-Pgpg" />
		</artifact:mvn>
	</target>


	<target name="run-tests" depends="compile" description="Run the unit tests">
		<delete dir="tmp/junit" />
		<mkdir dir="tmp/junit" />
		<delete dir="tmp/cobertura" />
		<mkdir dir="tmp/cobertura" />
		<delete dir="reports/junit" />
		<mkdir dir="reports/junit" />
		<delete dir="reports/coverage" />
		<mkdir dir="reports/coverage" />
		<javac source="1.5" target="1.5" srcdir="test" destdir="testbin" deprecation="true" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
			<classpath>
				<fileset dir="lib" includes="junit-4.10.jar" />
				<pathelement location="bin" />
			</classpath>
		</javac>
		<property name="instr.bin" value="tmp/cobertura-instrumented-bin" />
		<property name="data.file" value="${basedir}/cobertura.ser" />
		<mkdir dir="${instr.bin}" />
		<delete file="${data.file}" />
		<cobertura-instrument todir="${instr.bin}">
			<includeClasses regex="org\.gedcom4j\..*" />
			<excludeClasses regex=".*TestHelper.*" />
			<excludeClasses regex=".*Abstract.*" />
			<instrumentationClasspath>
				<path location="bin" />
			</instrumentationClasspath>
		</cobertura-instrument>
		<junit haltonfailure="false" haltonerror="false" fork="yes" forkmode="once">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${data.file}" />
			<classpath>
				<pathelement location="${instr.bin}" />
				<pathelement location="bin" />
				<pathelement location="testbin" />
				<path refid="cobertura.classpath" />
				<fileset dir="lib" includes="junit-4.10.jar" />
			</classpath>
			<batchtest todir="tmp/junit">
				<fileset dir="test">
					<include name="**/*" />
					<exclude name="**/Abstract*" />
					<exclude name="**/TestHelper*"/>
				</fileset>
				<formatter type="plain" usefile="false" />
			</batchtest>
			<formatter type="xml" />
		</junit>
		<junitreport todir="tmp/junit">
			<fileset dir="tmp/junit">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="reports/junit" />
		</junitreport>
		<!-- These properties can be overridden on the command line to ANT (such as from Jenkins) -->
		<property name="cobertura.format" value="html"/>
		<property name="cobertura.destdir" value="reports/coverage"/>
		<cobertura-report datafile="${data.file}" format="${cobertura.format}" destdir="${cobertura.destdir}">
			<fileset dir="src" />
		</cobertura-report>
		<delete file="${data.file}" />
		<delete>
			<fileset dir="${basedir}">
				<include name="junit*.properties"/>
			</fileset>
		</delete>

	</target>


	<target name="checkstyle" description="Run Checkstyle over the source, and produce a report of violations">
		<delete dir="tmp/checkstyle" />
		<mkdir dir="tmp/checkstyle" />
		<delete dir="reports/checkstyle" />
		<mkdir dir="reports/checkstyle" />
		<checkstyle config="checkstyle-config.xml" failureProperty="checkstyle.failure" failOnViolation="false">
			<formatter type="xml" tofile="tmp/checkstyle/checkstyle_report.xml" />
			<fileset dir="src" includes="**/*.java" />
			<classpath>
				<pathelement location="bin" />
			</classpath>
		</checkstyle>

		<xslt in="tmp/checkstyle/checkstyle_report.xml" out="reports/checkstyle/index.html" style="checkstyle-noframes-severity-sorted.xsl" />
	</target>

	<target name="findbugs" depends="compile" description="Run FindBugs over the source to find bug patterns and potential issues">
		<property name="findbugs.format" value="html"/>
		<property name="findbugs.destfile" value="reports/findbugs.html"/>
		<findbugs home="${findbugs.home}" output="${findbugs.format}" outputFile="${findbugs.destfile}" jvmargs="-Xmx128m">
			<auxClasspath path="lib/junit-4.10.jar"/>
			<sourcePath path="src" />
			<class location="bin" />
		</findbugs>
	</target>
</project>
